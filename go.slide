# Go Development Best Practices

Lam Tran
Software Engineer
lam.tran@tamara.co

## Agenda

1. Code
2. Test
3. Build
4. Deploy
5. Observe

## Go coding best practices

## [code] Common structure

- `cmd` package to store multiple binaries.
- `internal` packages since Go 1.4, see [doc](https://go.dev/doc/go1.4#internalpackages) and [design](https://docs.google.com/document/d/1e8kOo3r51b2BWtTs_1uADIA5djfXhPT36s6eHVRIvaU/edit).

## [code] Coding style and convention

Effective Go (Names), see [doc](https://go.dev/doc/effective_go#names), package names, see [blog](https://go.dev/blog/package-names)

Use `test` suffix for testing package

	package httptest # import net/http/httptest

Avoid repetition

    package http

    type Server struct {} # usage: http.Server

    type Client struct {} # usage: http.Client

## [code] Coding style references

- [Effective Go](https://go.dev/doc/effective_go)
- [Go Code Review Comments](https://go.dev/wiki/CodeReviewComments)
- [Uber Go Style Guide](https://github.com/uber-go/guide/blob/master/style.md)
- [Google Go Style Guide](https://google.github.io/styleguide/go)
- [Thanos Coding Style Guide](https://github.com/thanos-io/thanos/blob/main/docs/contributing/coding-style-guide.md)
- [Mattermost Go Style Guide](https://developers.mattermost.com/contribute/more-info/server/style-guide)
- [Gruntwork Go Style Guide](https://docs.gruntwork.io/guides/style/golang-style-guide)
- [CockroachDB Go Coding Guidelines](https://cockroachlabs.atlassian.net/wiki/spaces/CRDB/pages/181371303/Go+Golang+coding+guidelines)

## [code] Code generation

`//go:generate` directive since Go 1.4, see [blog](https://go.dev/blog/generate) and [design](https://go.googlesource.com/proposal/+/refs/heads/master/design/go-generate.md).

Generated code example:

    // Code generated by mockery. DO NOT EDIT.

    package mocks

DO NOT format the generated code.

## [code] Go Modules

Go mod provides access to operations on modules.

Usage:

	go mod <command> [arguments]

The commands are:

	download    download modules to local cache
	edit        edit go.mod from tools or scripts
	graph       print module requirement graph
	init        initialize new module in current directory
	tidy        add missing and remove unused modules
	vendor      make vendored copy of dependencies
	verify      verify dependencies have expected content
	why         explain why packages or modules are needed

Use "go help mod <command>" for more information about a command.

## [code] Go Multi-module workspace

See [blog](https://go.dev/blog/get-familiar-with-workspaces) and [tutorial](https://go.dev/doc/tutorial/workspaces).

Usage:

	go work <command> [arguments]

The commands are:

	edit        edit go.work from tools or scripts
	init        initialize workspace file
	sync        sync workspace build list to modules
	use         add modules to workspace file

## [code] Dependency management

- Follow Go [Release Policy](https://go.dev/doc/devel/release#policy)

    Each major Go release is supported until there are two newer major releases. For example, Go 1.5 was supported until the Go 1.7 release, and Go 1.6 was supported until the Go 1.8 release. We fix critical problems, including critical security problems, in supported releases as needed by issuing minor revisions (for example, Go 1.6.1, Go 1.6.2, and so on).

- Use official, popular, zero-dependency, in-active maintenance modules.
- Use dependabot to keep dependencies up-to-date as soon as possible.
- "A little copying is better than a little dependency." - [Go Proverbs](https://go-proverbs.github.io)

## [code] DevTools - golangci-lint

Install

    $ curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh \
        -s -- -b $(go env GOPATH)/bin v1.55.2

Common linters

    $ golangci-lint linters
    errcheck        errcheck is a program for checking for unchecked errors in Go code
    govet           vet examines Go source code and reports suspicious constructs
    unused          checks Go code for unused constants, variables, functions and types
    depguard        checks if package imports are in a list of acceptable packages
    revive          fast, configurable, extensible, flexible, and beautiful linter for Go
    gci             controls Go package import order and makes it always deterministic
    gosec           inspects source code for security problems
    ...

Run with `--fix` for auto-fixing found issues (if linter supports)

## [code] DevTools - mockery/gomock

- [mockery](https://github.com/vektra/mockery) vs [gomock](https://github.com/uber-go/mock)

## [code] Configuration

Use URI for dependency which has connection string.

    MYSQL_URI=mysql://user:password@tcp(host:port)/dbname?query
    REDIS_URI=redis://:password@localhost:6379/1?dial_timeout=5s

Avoid redundant data type

    type Config struct {
        // use `slog.Level` instead of `string`
        LogLevel slog.Level     `env:"LOG_LEVEL" envDefault:"INFO"`
        // use `time.Duration` instead of `int`
        Timeout time.Duration   `env:"TIMEOUT" envDefault:"30s"`
    }

Prefer standard configuration environment variables from external sdk

    AWS_ENDPOINT_URL_DYNAMODB="https://dynamodb.me-central-1.amazonaws.com"
    OTEL_EXPORTER_OTLP_HEADERS="Authorization=Basic 123456abc123456abc"

## [code] Tips & tricks

Execute remote cli with `go run` since Go 1.17

    $ go run golang.org/x/tools/cmd/deadcode@latest .

    # main.go (executing with go generate)
    //go:generate go run github.com/bufbuild/buf/cmd/buf@v1.29.0 generate
    package main

Use built-in packages since Go 1.21: [slices](https://pkg.go.dev/slices), [maps](https://pkg.go.dev/maps), [cmp](https://pkg.go.dev/cmp)

## Go testing best practices

## [test] Table-driven tests

## [test] Separate integration test with build tags

## [test] Tips & tricks

- See testing [docs](https://pkg.go.dev/testing)
- Use `t.Parallel()` for parallel testing.
- Use `t.Skip()` to skip a test.
- Use `t.Setenv()` to set environment variables (since Go 1.17)
- Use `t.Cleanup()` to clean up after a test or benchmark has finished (since Go 1.14), see [article](https://ieftimov.com/posts/testing-in-go-clean-tests-using-t-cleanup)
- Use `testdata` to store test fixtures
- References:

  - [Go Testing By Examples (Russ Cox)](https://www.youtube.com/watch?v=X4rxi9jStLo)
  - [Advanced Testing with Go (Mitchell Hashimoto)](https://www.youtube.com/watch?v=8hQG7QlcLBk)
  - [Testing Techniques (Andrew Gerrand)](https://www.youtube.com/watch?v=ndmB0bj7eyw)
  - [Learn Go with tests](https://quii.gitbook.io/learn-go-with-tests)

## Go building best practices

## [build] Embedding build metadata and assets

## [build] Dockerfile best practices

## Go deployment best practices

## [deploy] Health checks

- References:

  - [Amazon Builder - Implementing health checks](https://aws.amazon.com/builders-library/implementing-health-checks)
  - [Better Stack - Getting Started with Server Health Checks](https://betterstack.com/community/guides/monitoring/health-checks)
  - [Kubernetes Deep Health Check](https://encore.dev/blog/horror-stories-k8s)

## Go observability best practices
